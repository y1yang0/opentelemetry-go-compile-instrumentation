// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package setup

import (
	"github.com/dave/dst"
	"github.com/open-telemetry/opentelemetry-go-compile-instrumentation/tool/internal/ast"
	"github.com/open-telemetry/opentelemetry-go-compile-instrumentation/tool/internal/rule"
)

const (
	OtelRuntimeFile = "otel.runtime.go"
)

func genImportDecl(matched []*rule.InstRule) []dst.Decl {
	importDecls := make([]dst.Decl, 0, len(matched))
	for _, m := range matched {
		decl := ast.NewImportDecl("_", m.Path)
		importDecls = append(importDecls, decl)
	}
	return importDecls
}

func buildOtelRuntimeAst(decls []dst.Decl) *dst.File {
	const comment = "// This file is generated by the opentelemetry-go-compile-instrumentation tool. DO NOT EDIT."
	return &dst.File{
		Name: dst.NewIdent("main"),
		Decs: dst.FileDecorations{
			NodeDecs: dst.NodeDecs{
				Start: dst.Decorations{
					comment,
				},
			},
		},
		Decls: decls,
	}
}

func (*SetupProcessor) addDeps(matched []*rule.InstRule) error {
	// Generate all kinds of declarations
	importDecls := genImportDecl(matched)
	// Build the ast
	root := buildOtelRuntimeAst(importDecls)

	// Write the ast to file
	err := ast.WriteFile(OtelRuntimeFile, root)
	if err != nil {
		return err
	}
	return nil
}
